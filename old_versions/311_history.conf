#!/usr/bin/env bash
# ############################################################################
# # PATH: /opt/local/config/rc/bash               AUTHOR: Hoefkens.j@gmail.com
# # FILE: 311_history.conf                                 2023-04-04 09:33:40
# ############################################################################
#
# set -o xtrace
# set -o nounset
function bash_history() {
	local HELP="""${FUNCNAME[0]} [-h]|[-iqd] [DIR] [MATCH]

ARGS:

    <DIR>             Directory to source files from.

    <MATCH>           Regex to match Files against. Globbing and Expansion follow Bash Settings

OPTIONS:

    -h   --help       Show this help text
    -i   --nocase     Ignore Case when matching
    -q   --quiet      Quiet/Silent/Script, Dont produce any output
    -d   --debug      Enable xtrace for this script
    -w   --warning    Shows $WARNING

RECOMENDED:

    Make Sourcedir availeble as a command:
    su -c 'cp -v ./sourcedir.sh /etc/profile.d/

EXAMPLES:

    Source files in ~/.config/bashrc/ that end in '.bashrc'
        ...and (-q) do not produce any output:
    
        sourcedir -q ~/.config/bashrc/ '.*\.bashrc'

    Source all files in '.env' starting with "config" case insensitive
        ...this inlcudes 'CONFIG.cfg' 'conFig.conf' but not 'mycfg.config'
    
        sourcedir -i .env '^config.*' 
    
    Source all files in '~/.bash_aliasses/' starting with 2 numbers,
        ...followed by an '_'. this matches '00_file.alias' but not '99file'
    
        sourcedir ~/.bash_aliasses/ '\/[0-9]{2}_.*$'  : 

DEFAULTS:

    -MATCH: '/[0-9]+[_-]*.*\.(sh|bash|bashrc|rc|conf|cfg)$' 
    -DIR: '$PWD'

""";

	function install_fifo(){
		printf '%s...' "$1" 
		sudo rm -rfv "$1" 
		sudo mkfifo "$1"  
		sudo chmod 666 "$1"
		echo "DONE"
	}
	


	function history_install() {		
		function _install(){
			printf 'Installing: %s...' "$1"
			if [[ "$2"  == 'd' ]] ; then
				mkdir -p -m777  "$HISTDIR"  || sudo mkdir -p -m777 "$HISTDIR" 
			else		
				[[ -e "$1" ]] && install -m 777 /dev/null "$1"
				[[ ! -w "$1" ]] && sudo chmod 777 $1
			fi
			echo "DONE"
		}
		_install "$HISTDIR" "d"
		_install "$HISTSYSFULL" 	
		_install "$HISTSYSBOOt"
		_install "$HISTSYSMETA"
		[[ ! -e $HISTSYSLAST ]] &&   install_fifo "$HISTSYSLAST"
		[[ ! -e $HISTSYSUNIQ ]] &&   install_fifo "$HISTSYSUNIQ"

	}
	function history_update()	{
		builtin history -a "$HISTSYSLAST"
		builtin history -a "$HISTSYSFULL"
		builtin history -a "$HISTSESSION" 
		builtin history -c	
		cat "$HISTSYSFULL" "$HISTSYSBOOt" |tac| awk '!seen[$0]++' |tac > "$HISTFILE"
		cat $HISTSYSLAST |tee -a $HISTFILE |md5sum| history_meta >> "$HISTSYSMETA"
		builtin history -r "$HISTFILE"
	}
	function history_meta() 	{
		#N                   #STAMP 		
		local dat usr hst pid tty
		pNR=$( cat "$HISTSYSFULL" |wc -l )
		NR=$((pNR+1))
		_date="$( date +%s )" 
		_user="$USER" 
		_host="$HOSTNAME" 
		_ppid="$$"
		_tty="$(tty)"
		
		printf '%s\t\t%s\t\t%s\t\t%s\t\t' "$NR" "$_ppid" "$_date" "$BOOTSTAMP" 
		printf '%s\t\t%s\t\t%s\t\t%s\t\t' "$_host" "$_user" "$_tty" "$SHELL" 
		printf '%s\t\t%s\n' 							"$PS1" "$1" 
	}
	function history_start(){
		history_cleanup 
		[[ ! -e $HISTFILE ]] && install -m 777 /dev/null "$HISTFILE" 
		[[ ! -e $HISTSESSION ]] && install -m 777 /dev/null "$HISTSESSION" 

	}
	function history_cleanup (){
		cat "$HISTFILE" $HISTSESSION >> "$HISTDIR/$$.recovered"
		[[ -e $HISTFILE ]] && sudo trash "$HISTFILE" 
		[[ -e $HISTSESSION ]] && sudo trash "$HISTSESSION"
		[[ -e $HISTFILE ]] && sudo rm -rvf "$HISTFILE" 
		[[ -e $HISTSESSION ]] && sudo rm -rvf "$HISTSESSION"
	}
	function history_stop(){
		[[ -e $HISTFILE ]] && trash "$HISTFILE" 
		[[ -e $HISTSESSION ]] && trash "$HISTSESSION"
		history_cleanup
	}
	## HELPER FUNCTION if not on system:
	
	if [[ -z $(which batcat 2>/dev/null) ]]; then 
		function batcat () {
			local _cat _bat LANG STRING COLOR
			LANG="$1"
			shift 1
			STRING="$@"
			_cat=$( which "cat" )
			_bat=$( which "bat" )
			[[ -n "$_bat" ]] && printf '%s' "$@"  | $( printf '%s --%s --%s=%s' "$_bat" "plain" "language" "$LANG" ) 
			[[ -z $_bat ]] && echo $( printf '%s' "$@" ) | $( printf '%s' "$_cat"  ) 
		};
	fi	

	export BOOTSTAMP="$(uptime -s | tr -d '\-: ')" 
	export HISTSIZE=-1 
	export HISTFILESIZE="$HISTSIZE" 
	export HISTCONTROL=''
	export PFIX="history"
	export HISTDIR="/var/cache/history/bash"

	export HISTFILE="${HISTDIR}/${PFIX}.$$"
	export HISTSESSION="${HISTHISTDIR}/${PFIX}.HISTSESSION.$$"
	export HISTSYSBOOt="${HISTDIR}/system.boot.${BOOTSTAMP}"
	export HISTSYSFULL="${HISTDIR}/system.full.${PFIX}"
	export HISTSYSMETA="${HISTDIR}/system.meta.${PFIX}"
	export HISTSYSLAST="${HISTDIR}/system.last.${PFIX}" #FIFO



	FNC=${FUNCNAME[0]}
	case "$1" in
		install) history_install  &>/dev/null;;
		help)    HELP  &>/dev/null;;
		start)   history_start  &>/dev/null;;
		stop)    history_stop  &>/dev/null;;
		update)  history_update  &>/dev/null ;;
		uniq)    shift && history_uniq "$@"  &>/dev/null ;;
		meta)    history_meta "$@"  &>/dev/null ;;
		debug)   set -o xtrace
	esac

}	

function HISTCLEANUP() {
  echo "Cleaning up HIST files..."
  bash_history stop
  sleep 0.1
}

function HISTUPDATE() {
	builtin history -a "$HISTSYSLAST"
	bash_history update 
}

function history(){
	bash_history show
	builtin history "$@"
}

trap HISTCLEANUP  EXIT
bash_history start &>/dev/null
echo $SHELL  &>/dev/null
bash_history update  &>/dev/null
[[ "${PROMPT_COMMAND}" != *"HISTUPDATE"* ]] && export PROMPT_COMMAND="HISTUPDATE ; ${PROMPT_COMMAND}"


